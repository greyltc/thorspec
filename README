spxdrv  --  A port of Thorlabs SPx-USB to linux
===============================================

SP1-USB and SP2-USB are CCD spectrometers with a USB interface

Starting with the SPX_Drv library provided by Thorlabs, we connect this to
libusb, avoiding any dependence on the National Instruments VISA/VXI/IVI stew.


File         Purpose                                   Origin
========================================================================================================

spxtest.c    Basic test of libspx library              msc
             (SPX_* functions)

spxdrv.c     Implement SPX_* library functions         VXIPNP/WinNT/Thorlabs\ SPx-USB/SPX_Drv.c
spxdrv.h     for libspx                                VXIPNP/WinNT/include/SPX_Drv.h
                                                       Minimally modified by msc to compile for
                                                       gcc/linux.

SPX_Drv.txt  Documentation of the SPX_* functions      VXIPNP/WinNT/Thorlabs\ SPx-USB/manual/SPX_Drv.txt
                                                       The above three files provided by Thorlabs
                                                       under LGPL.

vitypes.h    Vi* types and VI* macros used by spxdrv   Implementation by msc for 32 bit Linux
                                                       of Windows definitions in visatype.h and vpptype.h
                                                       of visa specification

spxusb.c     Implement vi* and other functions         msc
spxusb.h     used by spxdrv, using libusb instead
             of visa.

spxmodule.c  Python module to interface with libspx    msc

setup.py     Builds Python module using distutils      msc


---------------------------------------------------------------------------------------------------------

Parameter range:
Integration time 1e-6 to 2e-1 seconds

produces 3000 output points

Device does not enumerate via hub.  OK directly on root hub

.199 integration shows v. hot pixel (0.02) about 762 nm, another (.015) at 662 (in dark)
they scale with integ time
sat level is 0.9 or so, thus not very important
need to clip off data below 400 nm because incorrect data

===========================================================================
Notes about how the lib processes data
SPX_acquireScanDataRaw
  performs read of SPX_PIXEL_BUFFER=3068 x2 bytes
  into  instrument's user data (SPX_data_t *data)

SPX_getScanData and SPX_getRawScanData
call the above SPX_acquireScanDataRaw.
--------------------
SPX_getRawScanData acquires data, then writes into the
return array (SPX_MAX_ADC_VALUE=4095)-data[i]

output data index is i=0; i<3068-68; i++
that is exactly 3000 points, values inverted from ADC,
out[i] <= in[3068-1-i]
0 <= 3067
1 <= 3066
2999 <= 68
input 67 is not copied
-------------------------------
SPX_getScanData acquires data, then hands over to
SPX_ProcessScanData to put into output array.
-------------------------------
SPX_ProcessScanData  subtracts all acq. data from
SPX_MAX_ADC_VALUE=4095, then measures even and odd average black level (from optical black pixels) then clips the
black offsets not to exceed values retrieved from SPx
during init()  -- check this

output is in same reverse order as SPX_getRawScanData
output has (clipped) dark values subtracted.
and is scaled so that dark=0 and saturation=1
(the scaling allows for the reduced dynamic range when there is a dark current)

SPX_SCAN_START=68
SPX_PIXEL_BUFFER=3068
SPX_BLACK_START=37 // first even black pixel
SPX_BLACK_STOP=57 // first pixel after last odd black pixel
=================================================================================
http://commons.wikimedia.org/wiki/File:Fluorescent_lighting_spectrum_peaks_labelled.gif
shows Hg ang Eu lines in CFL
=========================

Errors to handle in Python code
init -- IOError: device busy  (already initialised in this run of lib, need close())
        IOError: device not found  (absent or not rw)

How to look at data from test library driver:
echo "plot '/tmp/spec' with lines" | gnuplot -persist -
